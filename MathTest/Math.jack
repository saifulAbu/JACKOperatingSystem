// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
		static Array powerOf2;

    /** Initializes the library. */
    function void init() {
			var int i;
			var int val;

			let i = 0;
			let val = 1;
			let powerOf2 = Array.new(16);
			while(i < 16){
				let powerOf2[i] = val;
				let i = i + 1;
				let val = val + val;
			}
    	return;
		}

    /** Returns the absolute value of x. */
    function int abs(int x) {
   		//todo
			return 0;
	  }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	//todo

			return 0;
		}

		function int getBitCount(int x) {
			var int i, temp, bit;
			let i = 15;
			while(i > 0){
				let bit = (powerOf2[i] & x); 
				if(~(bit = 0)) {
					return (i + 1);
				}
				let i = i - 1;
			}
			return 1;
		}

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    	//todo
			return 0;
		}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	//todo
			return 0;
		}

    /** Returns the greater number. */
    function int max(int a, int b) {
    	//tod
			return 0;
		}

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	//todo
			return 0;
		}
}
