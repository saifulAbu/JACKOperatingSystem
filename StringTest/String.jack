// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
		static int ASCII_ZERO;
		static int ASCII_MINUS;
		field Array content;
		field int curLength;
		field int maxLen;
		field int sign; 

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    	if(maxLength < 0){
				do Sys.error(14);
			}
			if(maxLength = 0){
				let maxLength = 1;
			}
			let ASCII_ZERO = 48;
			let ASCII_MINUS = 45;
			let content = Array.new(maxLength);
			let maxLen = maxLength;
			let curLength = 0;
			let sign = 1;
			return this;
		}

    /** Disposes this string. */
    method void dispose() {
    	if(~(content = null)){
				do content.dispose();
			}
			do Memory.deAlloc(this);
			return;
		}

    /** Returns the current length of this string. */
    method int length() {
			return curLength;
		}

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
			if(j > (curLength - 1)){
				do Sys.error(15);
			}
			return content[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    	if((j < 0) | (j > (curLength - 1))){
				do Sys.error(16);
			}
			let content[j] = c;
			return;
		}

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	if(curLength > maxLen){
				do Sys.error(17);
			}
			let content[curLength] = c;
			let curLength = curLength + 1;
			return this;
		}

    /** Erases the last character from this string. */
    method void eraseLastChar() {
			if(curLength = 0){
				do Sys.error(18);
			}
			let curLength = (curLength - 1);
			return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int value, i, firstChar;
			let value = 0;
			let i = 0;
      if(content[0] = ASCII_MINUS){
				let i = 1;
				let sign = -1;
			}
			while(i < curLength){
				let value = (value * 10) + (String.asciiToInt(content[i]));
				let i = i + 1;
			}

			return (value * sign);
		}

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
			var int strLen;
			let strLen = String.digitCount(Math.abs(val));
			if(val < 0){
				let strLen = (strLen + 1);
			}
			
			let curLength = 0;
			do content.dispose();
			let content = Array.new(strLen);
			if(val < 0){
				do appendChar(ASCII_MINUS);
				let val = Math.abs(val);
			}
			do setIntHelper(val);
			return;
		}

		method void setIntHelper(int val){
			var int lastDigit, remainingVal;
			let lastDigit = String.mod(val, 10);
			let remainingVal = (val / 10);
			if((remainingVal) > 0){
				do setIntHelper(remainingVal);
			}
			do appendChar(String.intToAscii(lastDigit));
			return;
		}

    /** Returns the new line character. */
    function char newLine() {
			return 128;
		}

    /** Returns the backspace character. */
    function char backSpace() {
			return 129;		
		}

    /** Returns the double quote (") character. */
    function char doubleQuote() {
			return 34;
		}

		function int digitCount(int val){
			var int result;
			if(val = 0){
				return 1;
			}

			let result = 0;
			while(val > 0){
				let val = (val / 10);
				let result = (result + 1);
			}
			return result;
		}

		function int asciiToInt(int charVal){
			return (charVal - ASCII_ZERO);
		}

		function int intToAscii(int intVal){
			return (ASCII_ZERO + intVal);
		}

		function int mod(int dividend, int divider){
			return (dividend - (divider * (dividend / divider)));
		}
}
